{"mappings":"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","sources":["src/js/index.js"],"sourcesContent":["class DrawingBoard {\n  MODE = \"NONE\"; // 클릭한 메뉴를 알아내기위한 변수\n  IsMouseDown = false; // 마우스를 누르고 있는지 알아내기 위한 변수\n  eraserColor = \"#ffffff\"; // 지우개 색상 (많이 쓰이기때문에 변수로 지정)\n  backgroundColor = \"#ffffff\"; // 캔버스 배경 색상 (배경이 투명으로 되어있기때문에)\n  IsNavigatorVisible = false; // 네비게이터가 활성화되어있는지에 대한 변수\n  undoArray = []; // 되돌아가기 위해, 그린 데이터들을 저장해놓을 공간\n\n  containerEl; // 전체를 묶고 있는 부모 컨테이너\n  canvasEl; // 그리는 공간인 캔버스\n  toolbarEl; // 캔버스 옆에 tool 들을 묶고 있는 부모요소\n  brushEl; // 브러쉬 툴\n  colorPickerEl; // 컬러 피커 툴\n  brushPanelEl; // 브러쉬를 선택했을 때 나오는 브러쉬 크기 지정 패널\n  brushSliderEl; // 브러쉬 크기를 조절해주는 아이 (패널)\n  brushSizePreviewEl; // 브러쉬 크기를 미리보게 해주는 아이 (패널)\n  eraserEl; // 지우개 툴\n  navigatorEl; // 네비게이터 툴\n  navigatorImageContainerEl; // 네비게이터의 이미지를 감싸고 있는 부모\n  navigatorImageEl; // 네비게이터의 이미지 태그\n  undoEl; // 되돌아가기 툴\n  clearEl; // 초기화 툴\n  downloadLinkEl; // 다운로드 툴\n\n  constructor() {\n    this.assignElement();\n    this.initContext();\n    this.initCanvasBackgroundColor();\n    this.addEvent();\n  }\n  assignElement() {\n    this.containerEl = document.getElementById(\"container\");\n    this.canvasEl = this.containerEl.querySelector(\"#canvas\");\n    this.toolbarEl = this.containerEl.querySelector(\"#toolbar\");\n    this.brushEl = this.toolbarEl.querySelector(\"#brush\");\n    this.colorPickerEl = this.toolbarEl.querySelector(\"#colorPicker\");\n    this.brushPanelEl = this.containerEl.querySelector(\"#brushPanel\");\n    this.brushSliderEl = this.brushPanelEl.querySelector(\"#brushSize\");\n    this.brushSizePreviewEl =\n      this.brushPanelEl.querySelector(\"#brushSizePreview\");\n    this.eraserEl = this.toolbarEl.querySelector(\"#eraser\");\n    this.navigatorEl = this.toolbarEl.querySelector(\"#navigator\");\n    this.navigatorImageContainerEl = this.containerEl.querySelector(\"#imgNav\");\n    this.navigatorImageEl =\n      this.navigatorImageContainerEl.querySelector(\"#canvasImg\");\n    this.undoEl = this.toolbarEl.querySelector(\"#undo\");\n    this.clearEl = this.toolbarEl.querySelector(\"#clear\");\n    this.downloadLinkEl = this.toolbarEl.querySelector(\"#download\");\n  }\n\n  initContext() {\n    this.context = this.canvasEl.getContext(\"2d\");\n  }\n\n  initCanvasBackgroundColor() {\n    this.context.fillStyle = this.backgroundColor;\n    this.context.fillRect(0, 0, this.canvasEl.width, this.canvasEl.height); // 캔버스 기준으로 0,0 좌표에서 직사각형을 그려줌\n  }\n\n  addEvent() {\n    this.brushEl.addEventListener(\"click\", this.onClickBrush.bind(this));\n    this.canvasEl.addEventListener(\"mousedown\", this.onMouseDown.bind(this));\n    this.canvasEl.addEventListener(\"mousemove\", this.onMouseMove.bind(this));\n    this.canvasEl.addEventListener(\"mouseup\", this.onMouseUp.bind(this));\n    this.canvasEl.addEventListener(\"mouseout\", this.onMouseOut.bind(this));\n    this.brushSliderEl.addEventListener(\n      \"input\",\n      this.onChangeBrushSize.bind(this)\n    );\n    this.colorPickerEl.addEventListener(\"input\", this.onChangeColor.bind(this));\n    this.eraserEl.addEventListener(\"click\", this.onClickEraser.bind(this));\n    this.navigatorEl.addEventListener(\n      \"click\",\n      this.onClickNavigator.bind(this)\n    );\n    this.undoEl.addEventListener(\"click\", this.onClickUndo.bind(this));\n    this.clearEl.addEventListener(\"click\", this.onClickClear.bind(this));\n    this.downloadLinkEl.addEventListener(\n      \"click\",\n      this.onClickDownload.bind(this)\n    );\n  }\n\n  onClickDownload() {\n    this.downloadLinkEl.href = this.canvasEl.toDataURL(\"image/jpeg\", 1);\n    this.downloadLinkEl.download = \"example.jpeg\";\n  }\n\n  onClickClear() {\n    this.context.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);\n    this.undoArray = [];\n    this.updateNavigator();\n    this.initCanvasBackgroundColor();\n  }\n\n  onClickUndo() {\n    if (this.undoArray.length === 0) {\n      alert(\"더이상 실행취소 불가합니다\");\n      return;\n    }\n    let previousDataUrl = this.undoArray.pop();\n    let previousImage = new Image();\n    previousImage.onload = () => {\n      this.context.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);\n      this.context.drawImage(\n        previousImage,\n        0,\n        0,\n        this.canvasEl.width,\n        this.canvasEl.height,\n        0,\n        0,\n        this.canvasEl.width,\n        this.canvasEl.height\n      );\n    };\n    previousImage.src = previousDataUrl;\n  }\n\n  saveState() {\n    if (this.undoArray.length > 4) {\n      this.undoArray.shift();\n      this.undoArray.push(this.canvasEl.toDataURL());\n    } else {\n      this.undoArray.push(this.canvasEl.toDataURL());\n    }\n    // this.undoArray.push(this.canvasEl.toDataURL());\n    // console.log(this.undoArray);\n  } // 그린 그림 url 을 저장해놓을 함수\n\n  onClickNavigator(event) {\n    this.IsNavigatorVisible = !event.currentTarget.classList.contains(\"active\");\n    event.currentTarget.classList.toggle(\"active\");\n    this.navigatorImageContainerEl.classList.toggle(\"hide\");\n    // console.log(this.canvasEl.toDataURL());\n    this.updateNavigator();\n  }\n\n  updateNavigator() {\n    if (!this.IsNavigatorVisible) return;\n    this.navigatorImageEl.src = this.canvasEl.toDataURL();\n  }\n\n  onClickEraser(event) {\n    const IsActive = event.currentTarget.classList.contains(\"active\");\n    this.MODE = IsActive ? \"NONE\" : \"ERASER\";\n    this.canvasEl.style.cursor = IsActive ? \"default\" : \"crosshair\";\n    this.brushPanelEl.classList.add(\"hide\");\n    event.currentTarget.classList.toggle(\"active\");\n    this.brushEl.classList.remove(\"active\");\n  }\n\n  onMouseOut() {\n    if (this.MODE === \"NONE\") return;\n    this.IsMouseDown = false;\n    this.updateNavigator();\n  }\n\n  onChangeColor(event) {\n    this.brushSizePreviewEl.style.backgroundColor = event.target.value;\n  }\n\n  onChangeBrushSize(event) {\n    this.brushSizePreviewEl.style.width = `${event.target.value}px`;\n    this.brushSizePreviewEl.style.height = `${event.target.value}px`;\n  }\n\n  onMouseUp() {\n    if (this.MODE === \"NONE\") return;\n    this.IsMouseDown = false;\n    this.updateNavigator();\n  }\n\n  onMouseDown(event) {\n    if (this.MODE === \"NONE\") return;\n    this.IsMouseDown = true;\n    const currentPosition = this.getMousePosition(event);\n    this.context.beginPath();\n    this.context.moveTo(currentPosition.x, currentPosition.y);\n    this.context.lineCap = \"round\";\n    if (this.MODE === \"BRUSH\") {\n      this.context.strokeStyle = this.colorPickerEl.value;\n      this.context.lineWidth = this.brushSliderEl.value;\n    } else if (this.MODE === \"ERASER\") {\n      this.context.strokeStyle = this.eraserColor;\n      this.context.lineWidth = 50;\n    }\n    this.saveState();\n  }\n\n  onMouseMove(event) {\n    if (!this.IsMouseDown) return;\n    const currentPosition = this.getMousePosition(event);\n    this.context.lineTo(currentPosition.x, currentPosition.y);\n    this.context.stroke();\n  }\n\n  getMousePosition(event) {\n    const boundaries = this.canvasEl.getBoundingClientRect();\n    return {\n      x: event.clientX - boundaries.left,\n      y: event.clientY - boundaries.top,\n    };\n  }\n\n  onClickBrush(event) {\n    const IsActive = event.currentTarget.classList.contains(\"active\");\n    this.MODE = IsActive ? \"NONE\" : \"BRUSH\";\n    this.canvasEl.style.cursor = IsActive ? \"default\" : \"crosshair\";\n    this.brushPanelEl.classList.toggle(\"hide\");\n    event.currentTarget.classList.toggle(\"active\");\n    this.eraserEl.classList.remove(\"active\");\n  }\n}\n\nnew DrawingBoard();\n"],"names":["DrawingBoard","MODE","IsMouseDown","eraserColor","backgroundColor","IsNavigatorVisible","undoArray","containerEl","canvasEl","toolbarEl","brushEl","colorPickerEl","brushPanelEl","brushSliderEl","brushSizePreviewEl","eraserEl","navigatorEl","navigatorImageContainerEl","navigatorImageEl","undoEl","clearEl","downloadLinkEl","constructor","this","assignElement","initContext","initCanvasBackgroundColor","addEvent","document","getElementById","querySelector","context","getContext","fillStyle","fillRect","width","height","addEventListener","onClickBrush","bind","onMouseDown","onMouseMove","onMouseUp","onMouseOut","onChangeBrushSize","onChangeColor","onClickEraser","onClickNavigator","onClickUndo","onClickClear","onClickDownload","href","toDataURL","download","clearRect","updateNavigator","length","alert","previousDataUrl","pop","previousImage","Image","onload","drawImage","src","saveState","shift","push","event","currentTarget","classList","contains","toggle","IsActive","style","cursor","add","remove","target","value","currentPosition","getMousePosition","beginPath","moveTo","x","y","lineCap","strokeStyle","lineWidth","lineTo","stroke","boundaries","getBoundingClientRect","clientX","left","clientY","top"],"version":3,"file":"index.e693c965.js.map"}