{"mappings":"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","sources":["src/js/index.js"],"sourcesContent":["class DrawingBoard {\n  MODE = \"NONE\"; // 클릭한 메뉴를 알아내기위한 변수\n  IsMouseDown = false; // 마우스를 누르고 있는지 알아내기 위한 변수\n  eraserColor = \"#ffffff\"; // 지우개 색상 (많이 쓰이기때문에 변수로 지정)\n  backgroundColor = \"#ffffff\"; // 캔버스 배경 색상 (배경이 투명으로 되어있기때문에)\n  IsNavigatorVisible = false; // 네비게이터가 활성화되어있는지에 대한 변수\n  undoArray = []; // 되돌아가기 위해, 그린 데이터들을 저장해놓을 공간\n\n  containerEl; // 전체를 묶고 있는 부모 컨테이너\n  canvasEl; // 그리는 공간인 캔버스\n  toolbarEl; // 캔버스 옆에 tool 들을 묶고 있는 부모요소\n  brushEl; // 브러쉬 툴\n  colorPickerEl; // 컬러 피커 툴\n  brushPanelEl; // 브러쉬를 선택했을 때 나오는 브러쉬 크기 지정 패널\n  brushSliderEl; // 브러쉬 크기를 조절해주는 아이 (패널)\n  brushSizePreviewEl; // 브러쉬 크기를 미리보게 해주는 아이 (패널)\n  eraserEl; // 지우개 툴\n  navigatorEl; // 네비게이터 툴\n  navigatorImageContainerEl; // 네비게이터의 이미지를 감싸고 있는 부모\n  navigatorImageEl; // 네비게이터의 이미지 태그\n  undoEl; // 되돌아가기 툴\n  clearEl; // 초기화 툴\n  downloadLinkEl; // 다운로드 툴\n\n  constructor() {\n    this.assignElement();\n    this.initContext();\n    this.initCanvasBackgroundColor();\n    this.addEvent();\n  }\n  assignElement() {\n    this.containerEl = document.getElementById(\"container\");\n    this.canvasEl = this.containerEl.querySelector(\"#canvas\");\n    this.toolbarEl = this.containerEl.querySelector(\"#toolbar\");\n    this.brushEl = this.toolbarEl.querySelector(\"#brush\");\n    this.colorPickerEl = this.toolbarEl.querySelector(\"#colorPicker\");\n    this.brushPanelEl = this.containerEl.querySelector(\"#brushPanel\");\n    this.brushSliderEl = this.brushPanelEl.querySelector(\"#brushSize\");\n    this.brushSizePreviewEl =\n      this.brushPanelEl.querySelector(\"#brushSizePreview\");\n    this.eraserEl = this.toolbarEl.querySelector(\"#eraser\");\n    this.navigatorEl = this.toolbarEl.querySelector(\"#navigator\");\n    this.navigatorImageContainerEl = this.containerEl.querySelector(\"#imgNav\");\n    this.navigatorImageEl =\n      this.navigatorImageContainerEl.querySelector(\"#canvasImg\");\n    this.undoEl = this.toolbarEl.querySelector(\"#undo\");\n    this.clearEl = this.toolbarEl.querySelector(\"#clear\");\n    this.downloadLinkEl = this.toolbarEl.querySelector(\"#download\");\n  }\n\n  initContext() {\n    this.context = this.canvasEl.getContext(\"2d\");\n  }\n\n  initCanvasBackgroundColor() {\n    this.context.fillStyle = this.backgroundColor;\n    this.context.fillRect(0, 0, this.canvasEl.width, this.canvasEl.height); // 캔버스 기준으로 0,0 좌표에서 직사각형을 그려줌\n  }\n\n  addEvent() {\n    this.brushEl.addEventListener(\"click\", this.onClickBrush.bind(this));\n    this.canvasEl.addEventListener(\"mousedown\", this.onMouseDown.bind(this));\n    this.canvasEl.addEventListener(\"mousemove\", this.onMouseMove.bind(this));\n    this.canvasEl.addEventListener(\"mouseup\", this.onMouseUp.bind(this));\n    this.canvasEl.addEventListener(\"mouseout\", this.onMouseOut.bind(this));\n    this.brushSliderEl.addEventListener(\n      \"input\",\n      this.onChangeBrushSize.bind(this)\n    );\n    this.colorPickerEl.addEventListener(\"input\", this.onChangeColor.bind(this));\n    this.eraserEl.addEventListener(\"click\", this.onClickEraser.bind(this));\n    this.navigatorEl.addEventListener(\n      \"click\",\n      this.onClickNavigator.bind(this)\n    );\n    this.undoEl.addEventListener(\"click\", this.onClickUndo.bind(this));\n    this.clearEl.addEventListener(\"click\", this.onClickClear.bind(this));\n    this.downloadLinkEl.addEventListener(\n      \"click\",\n      this.onClickDownload.bind(this)\n    );\n  }\n\n  onClickDownload() {\n    this.downloadLinkEl.href = this.canvasEl.toDataURL(\"image/jpeg\", 1);\n    this.downloadLinkEl.download = \"example.jpeg\";\n  }\n\n  onClickClear() {\n    this.context.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);\n    this.undoArray = [];\n    this.updateNavigator();\n    this.initCanvasBackgroundColor();\n  }\n\n  onClickUndo() {\n    if (this.undoArray.length === 0) {\n      alert(\"더이상 실행취소 불가합니다\");\n      return;\n    }\n    let previousDataUrl = this.undoArray.pop();\n    let previousImage = new Image();\n    previousImage.onload = () => {\n      this.context.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);\n      this.context.drawImage(\n        previousImage,\n        0,\n        0,\n        this.canvasEl.width,\n        this.canvasEl.height,\n        0,\n        0,\n        this.canvasEl.width,\n        this.canvasEl.height\n      );\n    };\n    previousImage.src = previousDataUrl;\n  }\n\n  saveState() {\n    if (this.undoArray.length > 4) {\n      this.undoArray.shift();\n      this.undoArray.push(this.canvasEl.toDataURL());\n    } else {\n      this.undoArray.push(this.canvasEl.toDataURL());\n    }\n    // this.undoArray.push(this.canvasEl.toDataURL());\n    // console.log(this.undoArray);\n  } // 그린 그림 url 을 저장해놓을 함수\n\n  onClickNavigator(event) {\n    this.IsNavigatorVisible = !event.currentTarget.classList.contains(\"active\");\n    event.currentTarget.classList.toggle(\"active\");\n    this.navigatorImageContainerEl.classList.toggle(\"hide\");\n    // console.log(this.canvasEl.toDataURL());\n    this.updateNavigator();\n  }\n\n  updateNavigator() {\n    if (!this.IsNavigatorVisible) return;\n    this.navigatorImageEl.src = this.canvasEl.toDataURL();\n  }\n\n  onClickEraser(event) {\n    const IsActive = event.currentTarget.classList.contains(\"active\");\n    this.MODE = IsActive ? \"NONE\" : \"ERASER\";\n    this.canvasEl.style.cursor = IsActive ? \"default\" : \"crosshair\";\n    this.brushPanelEl.classList.add(\"hide\");\n    event.currentTarget.classList.toggle(\"active\");\n    this.brushEl.classList.remove(\"active\");\n  }\n\n  onMouseOut() {\n    if (this.MODE === \"NONE\") return;\n    this.IsMouseDown = false;\n    this.updateNavigator();\n  }\n\n  onChangeColor(event) {\n    this.brushSizePreviewEl.style.backgroundColor = event.target.value;\n  }\n\n  onChangeBrushSize(event) {\n    this.brushSizePreviewEl.style.width = `${event.target.value}px`;\n    this.brushSizePreviewEl.style.height = `${event.target.value}px`;\n  }\n\n  onMouseUp() {\n    if (this.MODE === \"NONE\") return;\n    this.IsMouseDown = false;\n    this.updateNavigator();\n  }\n\n  onMouseDown(event) {\n    if (this.MODE === \"NONE\") return;\n    this.IsMouseDown = true;\n    const currentPosition = this.getMousePosition(event);\n    this.context.beginPath();\n    this.context.moveTo(currentPosition.x, currentPosition.y);\n    this.context.lineCap = \"round\";\n    if (this.MODE === \"BRUSH\") {\n      this.context.strokeStyle = this.colorPickerEl.value;\n      this.context.lineWidth = this.brushSliderEl.value;\n    } else if (this.MODE === \"ERASER\") {\n      this.context.strokeStyle = this.eraserColor;\n      this.context.lineWidth = 50;\n    }\n    this.saveState();\n  }\n\n  onMouseMove(event) {\n    if (!this.IsMouseDown) return;\n    const currentPosition = this.getMousePosition(event);\n    this.context.lineTo(currentPosition.x, currentPosition.y);\n    this.context.stroke();\n  }\n\n  getMousePosition(event) {\n    const boundaries = this.canvasEl.getBoundingClientRect();\n    return {\n      x: event.clientX - boundaries.left,\n      y: event.clientY - boundaries.top,\n    };\n  }\n\n  onClickBrush(event) {\n    const IsActive = event.currentTarget.classList.contains(\"active\");\n    this.MODE = IsActive ? \"NONE\" : \"BRUSH\";\n    this.canvasEl.style.cursor = IsActive ? \"default\" : \"crosshair\";\n    this.brushPanelEl.classList.toggle(\"hide\");\n    event.currentTarget.classList.toggle(\"active\");\n    this.eraserEl.classList.remove(\"active\");\n  }\n}\n\nnew DrawingBoard();\n"],"names":[],"version":3,"file":"index.de5c0784.js.map","sourceRoot":"/__parcel_source_root/"}