class DrawingBoard{MODE="NONE";IsMouseDown=!1;eraserColor="#ffffff";backgroundColor="#ffffff";constructor(){this.assignElement(),this.initContext(),this.initCanvasBackgroundColor(),this.addEvent()}assignElement(){this.containerEl=document.getElementById("container"),this.canvasEl=this.containerEl.querySelector("#canvas"),this.toolbarEl=this.containerEl.querySelector("#toolbar"),this.brushEl=this.toolbarEl.querySelector("#brush"),this.colorPickerEl=this.toolbarEl.querySelector("#colorPicker"),this.brushPanelEl=this.containerEl.querySelector("#brushPanel"),this.brushSliderEl=this.brushPanelEl.querySelector("#brushSize"),this.brushSizePreviewEl=this.brushPanelEl.querySelector("#brushSizePreview"),this.eraserEl=this.toolbarEl.querySelector("#eraser")}initContext(){this.context=this.canvasEl.getContext("2d")}initCanvasBackgroundColor(){this.context.fillStyle=this.backgroundColor,this.context.fillRect(0,0,this.canvasEl.width,this.canvasEl.height)}addEvent(){this.brushEl.addEventListener("click",this.onClickBrush.bind(this)),this.canvasEl.addEventListener("mousedown",this.onMouseDown.bind(this)),this.canvasEl.addEventListener("mousemove",this.onMouseMove.bind(this)),this.canvasEl.addEventListener("mouseup",this.onMouseUp.bind(this)),this.canvasEl.addEventListener("mouseout",this.onMouseOut.bind(this)),this.brushSliderEl.addEventListener("input",this.onChangeBrushSize.bind(this)),this.colorPickerEl.addEventListener("input",this.onChangeColor.bind(this)),this.eraserEl.addEventListener("click",this.onClickEraser.bind(this))}onClickEraser(t){const s=t.currentTarget.classList.contains("active");this.MODE=s?"NONE":"ERASER",this.canvasEl.style.cursor=s?"default":"crosshair",this.brushPanelEl.classList.add("hide"),this.eraserEl.classList.toggle("active"),this.brushEl.classList.remove("active")}onMouseOut(){"NONE"!==this.MODE&&(this.IsMouseDown=!1)}onChangeColor(t){this.brushSizePreviewEl.style.backgroundColor=t.target.value}onChangeBrushSize(t){this.brushSizePreviewEl.style.width=`${t.target.value}px`,this.brushSizePreviewEl.style.height=`${t.target.value}px`}onMouseUp(){"NONE"!==this.MODE&&(this.IsMouseDown=!1)}onMouseDown(t){if("NONE"===this.MODE)return;this.IsMouseDown=!0;const s=this.getMousePosition(t);this.context.beginPath(),this.context.moveTo(s.x,s.y),this.context.lineCap="round","BRUSH"===this.MODE?(this.context.strokeStyle=this.colorPickerEl.value,this.context.lineWidth=this.brushSliderEl.value):"ERASER"===this.MODE&&(this.context.strokeStyle=this.eraserColor,this.context.lineWidth=50)}onMouseMove(t){if(!this.IsMouseDown)return;const s=this.getMousePosition(t);this.context.lineTo(s.x,s.y),this.context.stroke()}getMousePosition(t){const s=this.canvasEl.getBoundingClientRect();return{x:t.clientX-s.left,y:t.clientY-s.top}}onClickBrush(t){const s=t.currentTarget.classList.contains("active");this.MODE=s?"NONE":"BRUSH",this.canvasEl.style.cursor=s?"default":"crosshair",this.brushPanelEl.classList.toggle("hide"),this.brushEl.classList.toggle("active"),this.eraserEl.classList.remove("active")}}new DrawingBoard;
//# sourceMappingURL=index.9904030b.js.map
